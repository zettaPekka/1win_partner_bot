from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from asyncio import sleep

from middleware.db_di import DatabaseDI
from database.services.user_service import UserService
from database.services.gambling_service import GamblingService
from states.user_states import UserState
import keyboards.user_kbs as user_kbs
from config import *
from crash_signal.get_signal import get_k_signal

from random import randint


router = Router()
router.message.middleware(DatabaseDI())
router.callback_query.middleware(DatabaseDI())


@router.message(CommandStart())
async def start_handler(message: Message, user_service: UserService, gambling_service: GamblingService):
    photo = FSInputFile('images/main.jpg')
    
    tg_id = message.from_user.id
    await user_service.create_if_not_exists(tg_id)
    user = await user_service.get(tg_id)
    
    if not user.gambling_id:
        await message.answer_photo(photo, caption='<b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –≤—ã–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ AviatriX —Å –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –±–æ–ª–µ–µ 99%\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ <blockquote>–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —Ç–æ –ø—Ä–∏–¥—ë—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ  ü§ù</blockquote></b>',
                                reply_markup=user_kbs.start_kb)
        return
    
    gambling_data = await gambling_service.get_by_tg_id(tg_id)

    if not gambling_data.balance:
        await message.answer_photo(photo, caption='<b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –Ω–æ –Ω–∞ –Ω–µ–º –µ—â–µ –Ω–µ –ø–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>',
                                reply_markup=user_kbs.check_dep)
        return

    await message.answer_photo(photo, caption='<b>–£ —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É! –ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</b>',
                            reply_markup=user_kbs.get_signal)


@router.callback_query(F.data == 'get_access')
async def get_access(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('<b>–ß—Ç–æ–±—ã –±–æ—Ç –≤—ã–¥–∞–ª –¥–æ—Å—Ç—É–ø —Ç–µ–±–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π) –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.\n–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π ID —Å—é–¥–∞\n\n<blockquote>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–º–µ–Ω–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ </blockquote></b>',
                                    reply_markup=user_kbs.reg_kb)
    await state.set_state(UserState.gambling_id)


@router.callback_query(F.data == 'check_dep')
async def check_dep(callback: CallbackQuery, gambling_service: GamblingService):
    await callback.answer()
    
    gambling_data = await gambling_service.get_by_tg_id(callback.from_user.id)
    deposit_levels = {
        0: '1 —É—Ä–æ–≤–Ω—è, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–æ 2x',
        1: '2 —É—Ä–æ–≤–Ω—è, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–æ 4x',
        2: '3 —É—Ä–æ–≤–Ω—è, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–æ 20x',
    }
    
    if gambling_data.balance > 0:
        await callback.message.answer(f'<b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø {deposit_levels[min(gambling_data.balance//dep_step, 2)]}\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá</b>',
                                        reply_markup=user_kbs.get_signal)
        return
    
    await callback.message.answer('<b>–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>')


@router.message(Command('signal'))
async def get_message_signal(message: Message, gambling_service: GamblingService, user_service: UserService):
    gambling_data = await gambling_service.get_by_tg_id(message.from_user.id)
    user = await user_service.get(message.from_user.id)
    
    if gambling_data and gambling_data.balance > 0:
        
        waiting = await message.answer('<b>‚è≥ –°–∏–≥–Ω–∞–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>')
        await sleep(2)
        await waiting.delete()
        
        k = get_k_signal(gambling_data.balance, user.next_k)
        rec_percent = randint(10, 20)
        
        if user.next_k:
            await user_service.reset_next_k(message.from_user.id)
        
        await message.answer(f'<b>–°–∏–≥–Ω–∞–ª - {k}X\n–†–µ–∫–æ–º–µ–Ω–¥—É–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ —Å—Ç–∞–≤–∫—É - {rec_percent}%</b>',
                                reply_markup=user_kbs.get_signal)
        return
    
    photo = FSInputFile('images/forecast.jpg')
    await message.answer_photo(photo, caption=f'<b>–°–∏–≥–Ω–∞–ª - {k}X\n–†–µ–∫–æ–º–µ–Ω–¥—É–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ —Å—Ç–∞–≤–∫—É - {rec_percent}%</b>\n<blockquote>–ó–∞—Ö–æ–¥–∏—Ç—å –≤ —Å–¥–µ–ª–∫—É –Ω–∞–¥–æ, –µ—Å–ª–∏ –¥–æ –∏–≥—Ä—ã –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥, –∏–Ω–∞—á–µ —Ä–∏—Å–∫ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è</blockquote>',
                                        reply_markup=user_kbs.get_signal)


@router.callback_query(F.data == 'get_signal')
async def get_callback_signal(callback: CallbackQuery, gambling_service: GamblingService, user_service: UserService):
    await callback.answer()
    photo = FSInputFile('images/forecast.jpg')
    
    gambling_data = await gambling_service.get_by_tg_id(callback.from_user.id)
    user = await user_service.get(callback.from_user.id)
    
    waiting = await callback.message.answer('<b>‚è≥ –°–∏–≥–Ω–∞–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>')
    await sleep(2)
    await waiting.delete()
    
    k = get_k_signal(gambling_data.balance, user.next_k)
    rec_percent = randint(10, 20)
    
    if user.next_k:
        await user_service.reset_next_k(callback.from_user.id)
    
    await callback.message.answer_photo(photo, caption=f'<b>–°–∏–≥–Ω–∞–ª - {k}X\n–†–µ–∫–æ–º–µ–Ω–¥—É–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ —Å—Ç–∞–≤–∫—É - {rec_percent}%</b>\n<blockquote>–ó–∞—Ö–æ–¥–∏—Ç—å –≤ —Å–¥–µ–ª–∫—É –Ω–∞–¥–æ, –µ—Å–ª–∏ –¥–æ –∏–≥—Ä—ã –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥, –∏–Ω–∞—á–µ —Ä–∏—Å–∫ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è</blockquote>',
                                        reply_markup=user_kbs.get_signal)


@router.message(UserState.gambling_id)
async def link_id(message: Message, user_service: UserService, gambling_service: GamblingService, state: FSMContext):
    if await gambling_service.is_free(message.text):
        await message.answer('<b>–£—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–æ–±–æ—Ç—É. –û—Å—Ç–∞–ª—Å—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥.\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É, –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Ä–æ–±–æ—Ç–∞\n\n–£—Ä–æ–≤–Ω–∏:<blockquote>–î–µ–ø–æ–∑–∏—Ç –¥–æ 25$ ‚Äì —Å–∏–≥–Ω–∞–ª –¥–æ 2x\n–î–µ–ø–æ–∑–∏—Ç 25-49$ ‚Äì —Å–∏–≥–Ω–∞–ª—ã –¥–æ 4x\n–î–µ–ø–æ–∑–∏—Ç –æ—Ç 50$ ‚Äì —Å–∏–≥–Ω–∞–ª—ã –¥–æ 20x\n</blockquote></b>',
                                reply_markup=user_kbs.check_dep)
        await user_service.link_gambling_user_id(message.from_user.id, message.text)
        await state.clear()
        return

    await message.answer(f'<b>–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ID, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –æ—Ç –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ @{username}</b>')


@router.callback_query(F.data == 'profile')
async def prifle(callback: CallbackQuery, gambling_service: GamblingService,):
    await callback.answer()
    photo = FSInputFile('images/profile.jpg')
    
    gambling_data = await gambling_service.get_by_tg_id(callback.from_user.id)
    
    message_text = f'<b>–ü—Ä–æ—Ñ–∏–ª—å ID {callback.from_user.id}\n\n–ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {gambling_data.balance}$\n–£—Ä–æ–≤–µ–Ω—å: {round(min(gambling_data.balance//dep_step, 2) + 1)}</b>'
    await callback.message.answer_photo(photo, caption=message_text, reply_markup=user_kbs.get_signal)
    
    try:
        await callback.message.delete()
    except:
        pass